use 30daysofsql;

CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department_id INT,
    salary DECIMAL(10, 2),
    hire_date DATE
);

CREATE TABLE departments (
    department_id INT PRIMARY KEY,
    department_name VARCHAR(100)
);

CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10, 2)
);

CREATE TABLE products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(100),
    unit_price DECIMAL(10, 2)
);

CREATE TABLE order_details (
    order_detail_id INT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT,
    total_price DECIMAL(10, 2),
    FOREIGN KEY (order_id) REFERENCES orders(order_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);


-- Employees Table
INSERT INTO employees (employee_id, first_name, last_name, department_id, salary, hire_date)
VALUES
    (1, 'John', 'Doe', 1, 60000.00, '2019-05-15'),
    (2, 'Jane', 'Smith', 1, 65000.00, '2020-02-20'),
    (3, 'Michael', 'Johnson', 2, 58000.00, '2018-08-10'),
    (4, 'Emily', 'Williams', 2, 62000.00, '2017-10-25'),
    (5, 'David', 'Brown', 3, 70000.00, '2016-12-05'),
    (6, 'Sarah', 'Jones', 3, 72000.00, '2019-09-30'),
    (7, 'Robert', 'Miller', 1, 68000.00, '2018-04-12'),
    (8, 'Lisa', 'Davis', 2, 61000.00, '2021-01-05'),
    (9, 'Daniel', 'Wilson', 3, 64000.00, '2017-06-20'),
    (10, 'Jennifer', 'Martinez', 1, 63000.00, '2019-11-18');

-- Departments Table
INSERT INTO departments (department_id, department_name)
VALUES
    (1, 'Engineering'),
    (2, 'Marketing'),
    (3, 'Sales');

-- Orders Table
INSERT INTO orders (order_id, customer_id, order_date, total_amount)
VALUES
    (1, 1, '2024-03-01', 100.00),
    (2, 2, '2024-03-02', 150.00),
    (3, 3, '2024-03-03', 200.00),
    (4, 4, '2024-03-04', 120.00),
    (5, 5, '2024-03-05', 180.00),
    (6, 1, '2024-03-06', 90.00),
    (7, 2, '2024-03-07', 220.00),
    (8, 3, '2024-03-08', 130.00),
    (9, 4, '2024-03-09', 110.00),
    (10, 5, '2024-03-10', 250.00);

-- Products Table
INSERT INTO products (product_id, product_name, unit_price)
VALUES
    (1, 'Product A', 10.00),
    (2, 'Product B', 20.00),
    (3, 'Product C', 15.00),
    (4, 'Product D', 25.00),
    (5, 'Product E', 30.00);

-- Order_Details Table
INSERT INTO order_details (order_detail_id, order_id, product_id, quantity, total_price)
VALUES
    (1, 1, 1, 5, 50.00),
    (2, 2, 2, 3, 60.00),
    (3, 3, 3, 4, 60.00),
    (4, 4, 4, 2, 50.00),
    (5, 5, 5, 3, 90.00),
    (6, 6, 1, 2, 20.00),
    (7, 7, 2, 5, 100.00),
    (8, 8, 3, 3, 45.00),
    (9, 9, 4, 4, 100.00),
    (10, 10, 5, 6, 180.00);

-- Write a query to find the top 5 highest-paid employees.
with cte as (
select *, 
dense_rank() over(order by salary desc) as rnk
from employee)
select * from cte where rnk <= 5;


-- Retrieve the department(s) with the highest average salary.
select departments.department_name, 
avg(employees.salary)
from employees
join departments on departments.department_id = employees.department_id
group by departments.department_name
order by avg(employees.salary) desc
limit 1;

-- How can you find the total revenue generated by each product?
select product_name, sum(quantity*total_price) as revenue from products
join order_details on products.product_id = order_details.product_id
group by product_name;

-- Write a query to get the order details (product name, quantity, total price) for a specific order.
select order_details.order_id,products.product_name, order_details.quantity,order_details.total_price from products
join order_details on products.product_id = order_details.product_id;

-- Retrieve the employees who were hired in the last year.
SELECT * FROM employees
WHERE hire_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);

-- Write a query to calculate the total quantity of each product sold.
select products.product_id, sum(order_details.quantity) as total_quantity from products
join order_details on products.product_id = order_details.product_id
group by products.product_id;

-- How can you find the customer who has spent the most money?
select Orders.customer_id, sum(Order_Details.quantity*Order_Details.total_price) as money_spent from Orders
join Order_Details on Order_Details.order_id = Orders.order_id
group by Orders.customer_id
order by sum(Order_Details.quantity*Order_Details.total_price)  desc
limit 1;

-- Retrieve the employees who have been with the company for more than 5 years.
SELECT * FROM employees
WHERE hire_date <= DATE_SUB(CURDATE(), INTERVAL 5 YEAR);

-- Write a query to calculate the total number of orders placed in each month of the current year.
SELECT 
    MONTH(order_date) AS month,
    COUNT(*) AS total_orders
FROM 
    orders
WHERE 
    YEAR(order_date) = YEAR(CURDATE())
GROUP BY 
    MONTH(order_date);

-- How can you identify the product(s) with the highest revenue?
select Products.product_id, sum(Order_Details.total_price) as total_price from Order_Details 
join Products on Products.product_id = Order_Details.product_id
group by Products.product_id
order by total_price desc
limit 1;
